import "strings"

# Add list of approved Azure tenants here
approved_azure_tenants = ["0f682354-0991-4d4e-b12e-aaaaaaaaaaaa"]

# Regular Expression to match Azure OIDC discovery URL
azure_oidc_regex = "^https://login.microsoftonline.com/[0-9a-fA-F]{8}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{12}/v2.0$"

# Check that data is populated and the auth request references an Azure tenant
is_azure_auth = func() {
    # Verify data is populated
    if length(request.data else 0) is 0 {
        return false
    }

    # Verify Azure type auth method with tenant specification
    return is_azure_oidc_tenant() or is_azure_tenant()
}

# Check if request is for Azure OIDC auth
is_azure_oidc_tenant = func() {
    if "oidc_discovery_url" in keys(request.data) and 
        request.data.oidc_discovery_url matches azure_oidc_regex {
        return true
    }
    return false
}

# Check if request is Azure auth
is_azure_tenant = func() {
    if "tenant_id" in keys(request.data) {
        return true
    }
    return false
}

# Return Azure tenant ID
azure_tenant = func() {
    if is_azure_oidc_tenant() {
        azure_tenant_id = strings.split(request.data.oidc_discovery_url, "/")[3]
        return azure_tenant_id
    }

    if is_azure_tenant() {
        return request.data.tenant_id
    }

    error("False Azure tenant determination logic")
}

# Only execute on 'create', 'update', and on '/config' paths. Also verify request is for an Azure related auth method.
precond = rule {
        request.operation in ["create", "update"] and
        strings.has_suffix(request.path, "/config") and
        is_azure_auth()
}

# Check that the requested Azure tenant is in the list of approved Azure tenants.
main = rule when precond {
    azure_tenant() in approved_azure_tenants
}